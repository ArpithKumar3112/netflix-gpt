/** Old Notes **/
//createElement("Name of the Tag","Attributes ","Chidren=>Normal React  Element or Array of React Elements")
//React Element is an object,when it is rendered onto the DOM it becomes an HTML Element.
//JSX code is transpiled before it reaches JS Engine=>Transpiling is done(Parcel sends this code to Babel to transpile)
//JSX=>Babel transpiles it to React. createElement=>ReactElement-JS Object=>HTMLElemnt(render)
//Components in React=>
//Class based Component-OLD
//Functional Component-NEW = Normal Javascript function
//Functional Component==>returns Functional Element(JSX Element)
//Component Composition=>One component inside another
//JSX Automatically sanitizes the code
//We can write any Javascript code inside {} in JSX so we can write a React compnent as
//<Title/> or <Title></Title> or {Title()} 


#React Hooks
-Normal JS Functions()
-Two Important React Hooks
--UseState-Super Powerful React Variables
--UseEffect-
--Every time state variable changes ,React rerenders the component.
--It keeps the UI Layer and Data Layer in sync`

React Fiber->Makes it fast(Differential Algorithm)(https://github.com/acdlite/react-fiber-architecture)
It does effecient DOM Manipulation
It finds the difference between Virtual DOMs and then manipulates the Main DOM(HTML)


Hooks:
-UseState=Used to create local state variables inside your functional component(Never create useSate hook outside Function component)
--Good practice to create it at the beginning of a function
--Never use useState inside a conditional block(Will create inconsistency)
--Never create state variables inside a for loop or inside inner functions
-useEffect(()=>{},[])(Callback Function ,Dependency Array)
--if no dependency array==>useEffect is called after every render
--if dependency array is empty([])==>then useEffect is called after initial render(just once)
--if we mentiona state variable in the dependency array==>useEffect is called avery time the state variable changes
--Never update state variables directly
Routing
--Client Side Routing--Using react-routing-dom we use client side routing,where a netwrok call is not made to load a new component.(Ep.07 1:05:00 )
--Server Side Routing--MAke a network call and server sends new page

Dynamic Routing

Use {link} from reat-router-dom instead of <href a="">(anchor tag),this does not refresh the page and only renders that part of the page.


Class Based Components:-
Lifecycle
--  =>Parent Constructor
    =>Parent Render
    =>Child Constructor
    =>Child Render
    =>Child componentDidMount
    =>Parent componentDidMount


If there are two Children (The render phase of the children are batched together and then the componentDidMount phase3 starts because the render phase usually completes fast(as it is only Javascript work) then the commit phase starts.Check React lifecycle methods diagram starts)Ep.08- 1:30:00
--  =>Parent Constructor
    =>Parent Render
    =>Child1 Constructor
    =>CHild1 Render
    =>Child2 Constructor
    =>CHild2 Render
    =>Child1 componentDidMount
    =>Child2 componentDidMount
    =>Parent componentDidMount


componentDidMOunt(API calls are made here.This is similar(Not the same) to useEffect hook in Functional Components)

Optimizing Code:-
-Single Responsibility principle-Custom Hooks
-Chunking,CodeSplitting,Lazy Loading,Dynamic Bundling,Dynamic Importing--We split our code into smaller chunks
--import React ,{lazy,Suspense} from "react"
--const Grocery=lazy(()=>import("./components/Grocery"))
--{
                path:"/Grocery",
                element:<Suspense fallback={<Shimmer/>}><Grocery/></Suspense>               
            }

--This creates two .js files when bundling and Grocery is not loaded initially


Adding style to our applications:-
-SASS
-SCSS
-Styled Components
-Material UI,Chakra UI,Antdesign
-Tailwind CSS-Only required CSS is shipped

Higher Order Component
-FUnction that Takes a component enhances it and returns a new component
-See restaurantCard for Higher Order Component and see how props has been used


--Accordions


UI Layer-Data Layer
Controlled Components and Uncontrolled Components:-
-Parent Component has some or all control over the child component(Check Restaurant Category and Restaurant Menu ,showItems is passed and controls the way RestaurantMenu is shown )
-Lifting the state up in React(Control moved to Parent component)

Props Drilling
--Data has to be passed from parent down to child one after the other which is bad.This can be evaded using React CONTEXT.

React CONTEXT
--We can keep context Wherever we want
--We can wrap the application only where required
--Tying UserCOntext with State Variable
--Check EP:11 2:40:00
--<UserContext.Provider value={{loggedInUser:userName,setUserName}}></UserContext.Provider>

Redux Versus React Context-(Redux is an external package whereas )


#Redux Toolkit
    -Install @reduxjs/toolkit and react-redux
    -Build our setListofRestaurants
    -Connect our store to the app
    -create slice(cartSlice)
    -Dispatch Action
    -Selector


Testing
--Install React Testing LIbrary
-Installed Jest
-Installed Babel
-configured Babel-(Parcel already uses Babel,so should make changes so that configuration issue doesn't happen)
--Configure Parcel Config file(.parcelrc) to disable default babel transpilation(Cause parcel transpilation is better)(https://parceljs.org/languages/javascript/#babel)=>Read the Babel section and then Usage with other tools
--Jest Configuration(npx jext --init )Choose jsdom,babel
--Install JSDOM Library
--Install npm install @babel/preset-react-to make jsx work in test cases
--Include babel poreset in babel config
--Install @testing-library/jest-dom
--In package.json -->script section-->"watch-test":"jest --watch" this will allow test to run automatically every time the file is modified and saved(Hot Module Replacement)



github
--git init
--git branch -M main
--git add .
--git commit -m "MESSAGE"
--create an empty repository on Github
--git remote add origin "Repository details"
--git push origin main(pushing onto origin=>main branch in origin)


#Parcel
-Dev Build
-Local Server
-Hot Module Replacement(HMR)-- Hot Module Replacement (HMR) improves the development experience by automatically
                               updating modules in the browser at runtime without needing a whole page refresh
-File Watching ALgorithm - written in C++
-Caching-Faster Builds(Check parcel-cache folder in folder)
-Image Optimization(One of the most expensive thing in browsers is to load images)
-Minification of files
-Bundling
-Compress files before shipping it onto production
--Differential Bundling - Supports older browsers-Diagnostic
-Error Handling
-https-Tree Shaking - removes unused code
-Different dev and prod bundles

==>Tell this in interviews(Even the Bundler(Parcel is making your app fast))


Creating the app without create react app:-
--npm init(Creates the packaage.json file which is a configuration for npm)
--Install dependencies
    --Bundler(Webpack,parcel,etc)(A bundler packages,bundles our app before sedning it into production)
    --npm install -D parcel  (-D stands for dev dependencies,it is only required during developmenbt phase)
    --npx parcel index.html(Ignites our app,index.html is the source file of our project)(This is development build,creates the build in dist folder)
    --npm istall react
    --npm install react-dom
    -- <script type="module" src="./src/app.js"></script>(Type this in index.html file)
    --npx parcel build  "index.html"(Remove main:"App.js" from package .json file as we are mentioning the entry point in the command itself) 
                        (this creates production build)
    --We can add "browsersList":[
        "last 2 Chrome versions"
    ]
    --Add this as well
        --"scripts": {
                "start": "parcel index.html",
                "build": "parcel build index.html",
                "test": "jest",
                "watch-test":"jest --watch"
            }
        --We can automatically type 
            --npm run start--instead of npx parcel index.html
            --npm run build--instead of npx build parcel index.html

/** New Notes **/

React app with create-react-app
-Bundler usesd is webpack(Similar to parcel)
-npx create-react-app AppName
-Installing tailwing
    --npm install -D tailwindcss
    --npx tailwindcss init
    --make changes in tailwind.config.json and index.css as per the documentation
 -Install routing
    --npm install -D react-router-dom   



Firebase:-
-npm istall Firebase
-Setup a webapp on Firebase
-If you want to host your website on Firebase-Check the Also set up Frebase Hosting box.
-Store the files in a config
-Install firebase CLI using the command-`sudo npm install -g firebase-tools`
-`firebase login`
-`firebase init`
-What do you want to use as your public directory? build(All the bundled ,production ready code is in BUILD folder)
-npm run build
-firebase deploy

Redux:-
-npm install -D @reduxjs/toolkit
-npm install react-redux
-Once you have setup a store and slice ,check on the Redux extension(state section) if our store and slice is appearing.
-to dispatch actions=>const disp=useDispatch()(This is a hook)
                            disp(addUser({object}));
-